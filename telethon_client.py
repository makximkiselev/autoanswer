from telethon import TelegramClient, events
from parser import parse_message_text
from utils import ensure_messages_table, log_message
from database import insert_product_if_new, save_source_id, get_allowed_sources
from datetime import datetime
from llm import generate_reply
from telethon import TelegramClient
import logging
import asyncio
import os


logger = logging.getLogger(__name__)
processed_messages = set()

_clients_cache = []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ë–î)
ALLOWED_CHANNEL_IDS = []
ALLOWED_CHAT_IDS = []

async def resolve_entity_ids(client: TelegramClient):
    """
    –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (channel/chat) –∏–∑ –ë–î.
    –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º entity ID –≤ –ë–î.
    """
    global ALLOWED_CHANNEL_IDS, ALLOWED_CHAT_IDS

    source_types = [("channel", ALLOWED_CHANNEL_IDS), ("chat", ALLOWED_CHAT_IDS)]

    for source_type, target_list in source_types:
        target_list.clear()
        sources = get_allowed_sources(source_type)
        for name_or_id in sources:
            try:
                entity = await client.get_entity(name_or_id)
                target_list.append(entity.id)
                save_source_id(entity.id, name_or_id, source_type)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è {source_type} '{name_or_id}': {e}")

async def start_telethon_monitoring(client: TelegramClient, account_id: str):
    logger.info(f"üì¶ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_id}")
    me = await client.get_me()
    logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.username or me.phone}")

    await resolve_entity_ids(client)

    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    for channel_id in ALLOWED_CHANNEL_IDS:
        try:
            entity = await client.get_entity(channel_id)
            async for message in client.iter_messages(entity, limit=50):
                if message.text:
                    parse_message_text(message.text, {
                        "account_id": account_id,
                        "channel_id": entity.id,
                        "channel_name": getattr(entity, "title", "unknown"),
                        "message_id": message.id,
                        "date": message.date
                    })
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage())
    async def live_handler(event):
        try:
            chat = await event.get_chat()
            if chat.id not in ALLOWED_CHANNEL_IDS and chat.id not in ALLOWED_CHAT_IDS:
                return

            msg = event.message.message
            msg_id = event.message.id

            if (chat.id, msg_id) in processed_messages:
                return
            processed_messages.add((chat.id, msg_id))

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∫–∞–Ω–∞–ª)
            if chat.id in ALLOWED_CHANNEL_IDS:
                parse_message_text(msg, {
                    "account_id": account_id,
                    "channel_id": chat.id,
                    "channel_name": getattr(chat, "title", "unknown"),
                    "message_id": msg_id,
                    "date": event.message.date
                })

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sender = await event.get_sender()
            log_message(
                chat_id=chat.id,
                user_id=sender.id,
                username=sender.username or "",
                text=msg.strip(),
                timestamp=datetime.utcnow().isoformat(),
                account_id=account_id
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —á–∞—Ç)
            if chat.id in ALLOWED_CHAT_IDS:
                reply = generate_reply(chat.id, msg.strip())
                await client.send_message(chat.id, reply, reply_to=msg_id)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç {account_id} –≤ —á–∞—Ç {chat.id}")

        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ live-–æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await client.run_until_disconnected()

async def get_all_clients(client_configs):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ TelegramClient'—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É.
    –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    """
    global _clients_cache
    if _clients_cache:
        return _clients_cache

    SESSIONS_DIR = "sessions"
    for cfg in client_configs:
        session_path = os.path.join(SESSIONS_DIR, f"{cfg['session']}.session")
        client = TelegramClient(session_path, cfg["api_id"], cfg["api_hash"])
        await client.start()
        _clients_cache.append((client, cfg["label"]))
    return _clients_cache
